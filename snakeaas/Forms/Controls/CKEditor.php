<?php
/**
 * @author  Martin "Snake.AAS" Grossmann <martin@vyvoj.net>
 * @created 19.8.13 14:46
 */

namespace snakeaas\Forms\Controls;


use Nette\Application\UI\Form;
use Nette\DirectoryNotFoundException;
use Nette\Forms\Controls\TextArea;
use Nette\Image;
use Nette\Utils\Finder;
use Nette;
use snakeaas\NetteCKEditor\Html\Html;

/**
 * Class CKEditor
 * @package snakeaas\Forms\Controls
 */
class CKEditor extends TextArea {

	const PUBLIC_DIR_NAME = 'public';
	const TEMP_DIR_NAME   = 'temp';
	const UPLOAD_DIR_NAME = 'upload';

	/** @var string */
	protected $wwwDir;

	/** @var string */
	protected $uploadDir;

	/** @var string */
	protected $publicDir;

	/** @var string */
	protected $tempDir;

	/** @var CKEditorConfig */
	protected $config;


	public function __construct($label = null, $cols = null, $rows = null, $wwwDir) {
		parent::__construct($label, $cols, $rows);
		$this->config = new CKEditorConfig();

		$this->setDirectories($wwwDir);
	}


	/**
	 * @param string $wwwDir
	 */
	protected  function setDirectories($wwwDir) {
		$this->wwwDir = $wwwDir;

		$this->uploadDir = $this->wwwDir . DIRECTORY_SEPARATOR . self::UPLOAD_DIR_NAME;
		$this->publicDir = $this->uploadDir . DIRECTORY_SEPARATOR . self::PUBLIC_DIR_NAME;
		$this->tempDir   = $this->uploadDir . DIRECTORY_SEPARATOR . self::TEMP_DIR_NAME;
	}


	public function setValue($value) {
		$html = new Html();
		$html->setHtml($value);

		dump('set called!');

		if (!isset($this->wwwDir)) {
			$this->value = $value;

			return $this;
		}

		foreach ($html->getImages() as $image) {
			list($width, $height) = $image->getDimensionsFromStyle();

			$newFilename = preg_replace('~(.*)\.(\w+)~i', '${1}[' . $width . 'x' . $height . '].${2}',
										$image->getSrc()->getFilename());


			$newSrc = $image->getSrc()->getPathinfo()->getPath() . '/' . self::TEMP_DIR_NAME . '/' . $newFilename;

			$imFile = realpath($this->publicDir . DIRECTORY_SEPARATOR . $image->getSrc()->getFilename());

			if ($imFile !== FALSE) {
				$im = Image::fromFile($imFile);
				// TODO: resize only if image is larger than real dimensions
				$im->resize($width, $height);
				if ($im->save($this->tempDir . DIRECTORY_SEPARATOR . $newFilename)) {
					$image->setSrc($newSrc);
				}

			}
		}

		$this->value = $html->getHtml();

		return $this;
	}


	public function getValue() {
		dump('get called!');
		return parent::getValue(); // TODO: Change the autogenerated stub
	}


	public function getControl() {
		$control = parent::getControl();

		$configScript  = \Nette\Utils\Html::el('script')
			->setText($this->config->getConfiguration());
		$replaceScript = \Nette\Utils\Html::el('script')
			->setText('CKEDITOR.replace(\'' . $this->htmlName . '\', {"extraPlugins": "imagebrowser","imageBrowser_listUrl":"aha"});');

		return $control . $configScript . $replaceScript;
	}


	/**
	 * @param \snakeaas\Forms\Controls\Config $config
	 */
	public function setConfig($config) {
		$this->config = $config;
	}


	/**
	 * @return \snakeaas\Forms\Controls\Config
	 */
	public function getConfig() {
		return $this->config;
	}


	protected function attached($form) {
		parent::attached($form);

		$this->prepareEnvironment();
	}


	/* ------------------- preparation ------------------- */


	/**
	 * Copy necessary files, create directories for proper work
	 */
	protected function prepareEnvironment() {
		$this->copyAssets();

		self::checkDirectory($this->uploadDir);
		self::checkDirectory($this->publicDir);
		self::checkDirectory($this->tempDir);
	}


	/**
	 * Check if directory exists, if not, then try to create it.
	 * Throws an exception if directory can be created
	 *
	 * @param string $directory
	 *
	 * @throws \Nette\DirectoryNotFoundException
	 */
	static function checkDirectory($directory) {

		if (file_exists($directory)) {
			if (!is_dir($directory) || !is_writable($directory)) {
				throw new DirectoryNotFoundException("File {$directory} is not writable directory");
			}
		} else {
			// Intentionally because of permission denied warning
			if (@mkdir($directory) === FALSE) {
				throw new DirectoryNotFoundException("Directory {$directory} does not exist and can not be created");
			}
		}
	}


	/**
	 * Copy CKEditor files if there are none
	 */
	protected function copyAssets() {
		$targetDir = $this->wwwDir . '/ckeditor';

		if (!file_exists($targetDir) && is_writable($this->wwwDir)) {
			self::copy(__DIR__ . '/../../ckeditor', $targetDir);
		}
	}


	/**
	 * Recursive folder copying
	 */
	static function copy($source, $dest, $overwrite = TRUE) {
		$dir = opendir($source);
		@mkdir($dest);
		while (FALSE !== ($file = readdir($dir))) {
			if (($file != '.') && ($file != '..')) {
				if (is_dir($source . '/' . $file)) {
					self::copy($source . '/' . $file, $dest . '/' . $file);

				} else {
					if ($overwrite || !file_exists($dest . '/' . $file)) {
						copy($source . '/' . $file, $dest . '/' . $file);
					}
				}
			}
		}
		closedir($dir);
	}

	/*
	Function sending JsonResponse with available images on filesystem

	public function handleGetJsonImageList() {
	$return = array();

	$finder = Finder::findFiles('*.jpg', '*.png', '*.gif')
	->from($this->publicDir);

	foreach ($finder as $file) {
	$tmp          = array();
	$tmp['image'] = $this->template->basePath . '/' . $this->uploadDirName . '/' . self::PUBLIC_DIR_NAME . '/' . $file->getFilename();

	if (file_exists($this->uploadDir . DIRECTORY_SEPARATOR . 'mini' . DIRECTORY_SEPARATOR . $file->getFilename())) {
	$tmp['thumb'] = $this->template->basePath . '/' . $this->uploadDirName . '/mini/' . $file->getFilename();
	}

	$return[] = $tmp;
	}
	$this->presenter->sendResponse(new JsonResponse($return));
	}








	/


	/**
	@return Form

	public function getForm() {
	return $this->form;
	}



	@return string|NULL

	public function getWwwDir() {
	return $this->wwwDir;
	}


	/**
	@param string $wwwDir

	public function setWwwDir($wwwDir) {
	$this->wwwDir = $wwwDir;
	}


	/**
	@return Config

	public function getConfig() {
	return $this->config;
	}


	/**
	@param string $uploadDir

	public function setUploadDir($uploadDir) {
	$this->uploadDir = $uploadDir;
	}


	/**
	@return string

	public function getUploadDir() {
	return $this->uploadDir;
	}
*/

}
